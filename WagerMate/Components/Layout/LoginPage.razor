@page "/login"
@using WagerMate.Data.user
@using WagerMate.Services.user
@layout LoginLayout
@rendermode InteractiveServer
@inject IUserService UserService;
@inject NavigationManager Navigation
@inject ICookieService CookieService;
@inject IHashService HashService

@inherits BasePage;

<div class="column">
    <div id="leftSide" class="half">
        <h1>WagerMate</h1>

        <p>Welcome Back!</p>

        <EditForm Model="@_existingUserData" OnValidSubmit="HandleLogin" FormName="FormLogin" method="post">
            <DataAnnotationsValidator/>
            <div class="field">
                <div>
                    <label>E-mail address:</label>
                </div>
                <InputText class="input" @bind-Value="_existingUserData.EMail"/>
            </div>
            <div class="field">
                <div>
                    <label>Password:</label>
                </div>
                <InputText class="input" type="password" @bind-Value="_existingUserData.Password"/>
                @if (!_correctLoginEmail || !_correctLoginPassword)
                {
                    <p class="warnings">E-mail address or password is incorrect!</p>
                }
                @if (!_loginRequiredElements)
                {
                    <p class="warnings">All fields are required!</p>
                }
            </div>
            <div id="login-space">
                <input id="login" type="submit" value="Log in"/>
            </div>
        </EditForm>
    </div>

    <div id="rightSide" class="half">
        <h1>WagerMate</h1>

        <p>Welcome Mate!</p>

        <EditForm Model="@_newUserData" OnValidSubmit="HandleRegister" FormName="FormRegister">
            <DataAnnotationsValidator/>
            <div class="field">
                <div>
                    <label>Username:</label>
                </div>
                <InputText class="input" @bind-Value="_newUserData.Username"/>
            </div>
            <div class="field">
                <div>
                    <label>E-mail address:</label>
                </div>
                <InputText class="input" @bind-Value="_newUserData.EMail"/>
                @if (!_newRegisterEmail)
                {
                    <p class="warnings">Please choose another e-mail address!</p>
                }
            </div>
            <div class="field">
                <div>
                    <label>Password:</label>
                </div>
                <InputText class="input" type="password" @bind-Value="_newUserData.Password"/>
            </div>
            <div class="field">
                <div>
                    <label>Repeat Password:</label>
                </div>
                <InputText class="input" type="password" @bind-Value="_newUserData.PasswordRepeat"/>
                @if (_passwordTypo)
                {
                    <p class="warnings">Must match Password!</p>
                }
            </div>
            <div class="field">
                <div>
                    <label>Enter Access Code:</label>
                </div>
                <InputText class="input" @bind-Value="_newUserData.AccessCode"/>
                @if (!_correctAccessCode)
                {
                    <p class="warnings">Access code is incorrect!</p>
                }
                @if (!_registerRequiredElements)
                {
                    <p class="warnings">All fields are required!</p>
                }
            </div>
            <div id="register-space">
                <input id="register" type="submit" value="Register">
            </div>
        </EditForm>
    </div>
</div>


@code {
    private readonly ExistingUserData _existingUserData = new();

    public class ExistingUserData
    {
        public string? EMail { get; set; }
        public string? Password { get; set; }
        
    }

    private readonly NewUserData _newUserData = new();

    public class NewUserData
    {
        public string? EMail { get; set; }
        public string? Username { get; set; }
        public string? Password { get; set; }
        public string? PasswordRepeat { get; set; }
        public string? AccessCode { get; set; }
    }

    private bool _loginRequiredElements = true;
    private bool _correctLoginPassword = true;
    private bool _correctLoginEmail = true;

    private async Task HandleLogin()
    {
        _loginRequiredElements = (!String.IsNullOrEmpty(_existingUserData.EMail)) && (!String.IsNullOrEmpty(_existingUserData.Password));
        _correctLoginEmail = UserService.EmailIsRegistered(_existingUserData.EMail!);
        if (_loginRequiredElements && _correctLoginEmail)
        {
            try
            {
                var user = UserService.GetUserByEmail(_existingUserData.EMail!);
                _correctLoginPassword = HashService.CreateHash(_existingUserData.EMail!, _existingUserData.Password!).Equals(user.Password);
                Console.WriteLine("Password: " + _correctLoginPassword);
                if (_correctLoginPassword && _correctLoginEmail)
                {
                    await CookieService.SetCookieByNameAndValue("CookieID", user.Password!, 7);
                    Navigation.NavigateTo("/");
                }
                else
                {
                    Console.WriteLine("Invalid password.");
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                Console.WriteLine("Not registered E-Mail.");
            }
        }
    }

    private bool _registerRequiredElements = true;
    private bool _newRegisterEmail = true;
    private bool _passwordTypo;
    private bool _correctAccessCode = true;
    
    public async Task HandleRegister()
    {
        _registerRequiredElements = (!String.IsNullOrEmpty(_newUserData.EMail)) && (!String.IsNullOrEmpty(_newUserData.Username)) && (!String.IsNullOrEmpty(_newUserData.Password)) && (!String.IsNullOrEmpty(_newUserData.PasswordRepeat)) && (!String.IsNullOrEmpty(_newUserData.AccessCode));
        _newRegisterEmail = !UserService.EmailIsRegistered(_newUserData.EMail!);
        _passwordTypo = _newUserData.Password != _newUserData.PasswordRepeat;
        _correctAccessCode = _newUserData.AccessCode == "42";
        if (_newRegisterEmail && _registerRequiredElements && !_passwordTypo && _correctAccessCode)
        {
            var registeredUser = RegisterUser();
            if (registeredUser is { Password: not null })
            {
                await CookieService.SetCookieByNameAndValue("CookieID", registeredUser.Password, 7);
                Navigation.NavigateTo("/");
            }
        }
        else
        {
            Console.WriteLine("E-Mail is already taken.");

        }
    }

    private User? RegisterUser()
    {
        if ((_newUserData.Username == null) | (_newUserData.EMail == null)) return null;
        var user2 = new User
        {
            Name = _newUserData.Username,
            Email = _newUserData.EMail,
            Password = HashService.CreateHash(_newUserData.EMail!, _newUserData.Password!)
        };

        try
        {
            UserService.CreateUser(user2);
            return user2;
        }
        catch (Exception)
        {
            Console.WriteLine("service failed");
            throw;
        }
    }

}