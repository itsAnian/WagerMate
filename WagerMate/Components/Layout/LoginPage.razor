@page "/login"
@layout LoginLayout
@using System.ComponentModel.DataAnnotations
@rendermode InteractiveServer
@using WagerMate.Data
@using WagerMate.Services
@inject IUserService service;
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager Navigation


<div class="column">
<div id="leftSide" class="half">
    <h1>WagerMate</h1>

    <p>Welcome Back!</p>

    <EditForm Model="@_existingUserData" FormName="test1">
        <DataAnnotationsValidator/>
        <div class="field">
            <div><label>E-mail address:</label></div>
            <InputText class="input" type="email" @bind-Value="_existingUserData.EMail"/>
            <ValidationMessage For=@(() => _existingUserData.EMail) />
        </div>
        <div class="field">
            <div><label>Password:</label></div>
            <InputText class="input" type="password" @bind-Value="_existingUserData.Password"/>
            <ValidationMessage For=@(() => _existingUserData.Password) />
        </div>
        <div id="loginspace"><input id="login" type="submit" value="Log in" /></div>
    </EditForm>
</div>

<div id="rightSide" class="half">
    <h1>WagerMate</h1>

    <p>Welcome Mate!</p>

    <EditForm Model="@_newUserData" FormName="test2">
        <DataAnnotationsValidator/>
        <div class="field">
            <div><label>Username:</label></div>
            <InputText class="input" @bind-Value="_newUserData.Username"/>
            <ValidationMessage For=@(() => _newUserData.Username) />
        </div>
        <div class="field">
            <div><label>E-mail address:</label></div>
            <InputText class="input" type="email" @bind-Value="_newUserData.EMail"/>
            <ValidationMessage For=@(() => _newUserData.EMail) />
        </div>
        <div class="field">
            <div><label>Password:</label></div>
            <InputText class="input" type="password" @bind-Value="_newUserData.Password"/>
            <ValidationMessage For=@(() => _newUserData.Password) />
        </div>
        <div class="field">
            <div><label>Repeat Password:</label></div>
            <InputText class="input" type="password" @bind-Value="_newUserData.PasswordRepeat"/>
            <ValidationMessage For=@(() => _newUserData.PasswordRepeat) />
        </div>
        <div id="registerspace"><input id="register" type="submit" value="Register" @onclick="@CreateUser"/></div>
    </EditForm>
</div>
</div>



@code {
    private ExistingUserData _existingUserData = new ExistingUserData();
    
    public class ExistingUserData
    {
        [Required (ErrorMessage = "E-mail address is required!")]
        public string? EMail { get; set; }
        [Required (ErrorMessage = "Password is required!")]
        public string? Password { get; set; }
    }

    private NewUserData _newUserData = new NewUserData();

    public class NewUserData
    {
        [Required (ErrorMessage = "E-mail address is required!")]
        public string? EMail { get; set; }
        [Required (ErrorMessage = "Username is required!")]
        public string? Username { get; set; }
        [Required (ErrorMessage = "Password is required!")]
        public string? Password { get; set; }
        [Required (ErrorMessage = "Repetition of password is required!")]
        [Compare("Password", ErrorMessage = "Must match Password!")]
        public string? PasswordRepeat { get; set; }
    }
    
    private void CreateUser()
    {
        Console.WriteLine("CreateUser2");
        User user2 = new User();
        
        user2.Name = _newUserData.Username;
        user2.Email = _newUserData.EMail;
        user2.Password = _newUserData.Password;

        Console.WriteLine("user locally created");
        try
        {
            service.CreateUser(user2);
        }
        catch (Exception e)
        {
            Console.WriteLine("service failldasdjmlksa");
        }
    }
    
    private LoginModel _loginModel = new LoginModel();
 
    private async Task HandleLogin()
    {
        if (_loginModel.EMail == "admin" && _loginModel.Password == "password") // Replace with real authentication logic
        {
            var claims = new List<Claim>
            {
                new Claim(ClaimTypes.Name, _loginModel.EMail)
            };
 
            var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var principal = new ClaimsPrincipal(identity);
 
            await HttpContextAccessor.HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal);
 
            Navigation.NavigateTo("/");
        }
        else
        {
            // Handle invalid login
        }
    }
 
    private class LoginModel
    {
        public string? EMail { get; set; }
        public string? Password { get; set; }
    }
}