@page "/login"
@using System.ComponentModel.DataAnnotations
@using Blazored.SessionStorage
@layout LoginLayout
@rendermode InteractiveServer
@inject IUserService service;
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager Navigation
@inject ICookieService cookieService;
@*
@using Microsoft.AspNetCore.Components.Authorization;
@using System.Security.Claims;
@using System.Threading.Tasks;
*@
<div class="column">
    <div id="leftSide" class="half">
        <h1>WagerMate</h1>

        <p>Welcome Back!</p>

        <EditForm Model="@_existingUserData" OnValidSubmit="HandleLogin" FormName="FormLogin">
            <DataAnnotationsValidator/>
            <div class="field">
                <div>
                    <label>E-mail address:</label>
                </div>
                <InputText class="input" @bind-Value="_existingUserData.EMail"/>
                <ValidationMessage For="@(() => _existingUserData.EMail)"/>
                @if (!string.IsNullOrEmpty(errorMessageEMail))
                {
                    @errorMessageEMail
                }
            </div>
            <div class="field">
                <div>
                    <label>Password:</label>
                </div>
                <InputText class="input" type="password" @bind-Value="_existingUserData.Password"/>
                <ValidationMessage For="@(() => _existingUserData.Password)"/>
                @if (!string.IsNullOrEmpty(errorMessagePassword))
                {
                    @errorMessagePassword
                }
            </div>
            <div id="loginspace">
                <input id="login" type="submit" value="Log in"/>
            </div>
        </EditForm>
    </div>

    <div id="rightSide" class="half">
        <h1>WagerMate</h1>

        <p>Welcome Mate!</p>

        <EditForm Model="@_newUserData" OnValidSubmit="HandleRegister" FormName="FormRegister">
            <DataAnnotationsValidator/>
            <div class="field">
                <div>
                    <label>Username:</label>
                </div>
                <InputText class="input" @bind-Value="_newUserData.Username"/>
                <ValidationMessage For="@(() => _newUserData.Username)"/>
            </div>
            <div class="field">
                <div>
                    <label>E-mail address:</label>
                </div>
                <InputText class="input" @bind-Value="_newUserData.EMail"/>
                <ValidationMessage For="@(() => _newUserData.EMail)"/>
                @if (!string.IsNullOrEmpty(errorMessageRegistrationEMail))
                {
                    @errorMessageRegistrationEMail
                }
            </div>
            <div class="field">
                <div>
                    <label>Password:</label>
                </div>
                <InputText class="input" type="password" @bind-Value="_newUserData.Password"/>
                <ValidationMessage For="@(() => _newUserData.Password)"/>
            </div>
            <div class="field">
                <div>
                    <label>Repeat Password:</label>
                </div>
                <InputText class="input" type="password" @bind-Value="_newUserData.PasswordRepeat"/>
                <ValidationMessage For="@(() => _newUserData.PasswordRepeat)"/>
            </div>
            <div class="field">
                <div>
                    <label>Enter Invite Code:</label>
                </div>
                <InputText class="input" @bind-Value="_newUserData.InviteCode"/>
                <ValidationMessage For="@(() => _newUserData.InviteCode)"/>
            </div>
            <div id="registerspace">
                <input id="register" type="submit" value="Register">
            </div>
        </EditForm>
    </div>
</div>


@code {
    private readonly ExistingUserData _existingUserData = new();

    public class ExistingUserData
    {
        [Required(ErrorMessage = "E-mail address is required!")]
        [EmailAddress(ErrorMessage = "Invalid e-mail address!")]
        public string? EMail { get; set; }

        [Required(ErrorMessage = "Password is required!")]
        public string? Password { get; set; }
    }

    private readonly NewUserData _newUserData = new();

    public class NewUserData
    {
        [Required(ErrorMessage = "E-mail address is required!")]
        [EmailAddress(ErrorMessage = "Invalid e-mail address!")]
        public string? EMail { get; set; }

        [Required(ErrorMessage = "Username is required!")]
        public string? Username { get; set; }

        [Required(ErrorMessage = "Password is required!")]
        public string? Password { get; set; }

        [Required(ErrorMessage = "Repetition of password is required!")]
        [Compare("Password", ErrorMessage = "Must match Password!")]
        public string? PasswordRepeat { get; set; }

        [Required(ErrorMessage = "Invite code is required!")]
        [CompareInviteCode("42", ErrorMessage = "Invalid invite code!")]
        public string? InviteCode { get; set; }
    }

    /*private LoginModel _loginModel = new LoginModel();

    private class LoginModel
    {
        public string? EMail { get; set; }
        public string? Password { get; set; }
    }*/

    public class CompareInviteCodeAttribute : ValidationAttribute
    {
        private readonly string _validCode;

        public CompareInviteCodeAttribute(string validCode)
        {
            _validCode = validCode;
        }

        protected override ValidationResult? IsValid(object? value, ValidationContext validationContext)
        {
            if (value == null || value.ToString() != _validCode)
            {
                return new ValidationResult(ErrorMessage ?? "Invalid invite code!");
            }

            return ValidationResult.Success;
        }
    }


    private void CreateUser()
    {
        Console.WriteLine("Register New User");
        var user2 = new User();

        user2.Name = _newUserData.Username;
        user2.Email = _newUserData.EMail;
        user2.Password = _newUserData.Password;

        Console.WriteLine("user locally registered");
        try
        {
            service.CreateUser(user2);
        }
        catch (Exception e)
        {
            Console.WriteLine("service failed");
        }
    }

    private async Task HandleLogin()
    {
        try
        {
            var user = service.GetUserByEmail(_existingUserData.EMail!);
            if (user.Password == _existingUserData.Password)
            {
                Console.WriteLine("Login successful.");
                var sessionStorageObj = new SessionStorage();
                await sessionStorageObj.SetSessionValue("SessionID", user.Password, cookieService);
                Navigation.NavigateTo("/");
            }
            else
            {
                Console.WriteLine("Invalid password.");
                errorMessagePassword = "Invalid Password!";
                errorMessageEMail = null;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            Console.WriteLine("Not registered E-Mail.");
            errorMessageEMail = "No account with this e-mail address exists!";
        }
    }


    /*
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    private async Task SignInUser(User result)
    {
        HttpContext = HttpContextAccessor.HttpContext;
        if (HttpContext != null)
        {
            var claims = new List<Claim>
            {
                new Claim(ClaimTypes.Name, result.Email!)
            };

            var claimsIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var claimsPrincipal = new ClaimsPrincipal(claimsIdentity);

            await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, claimsPrincipal);


        }
    }
    */
    private string? errorMessageEMail;
    private string? errorMessagePassword;
    private string? errorMessageRegistrationEMail;

    public void HandleRegister()
    {
        var EmailExists = service.EmailIsRegistered(_newUserData.EMail);
        if (!EmailExists)
        {
            CreateUser();
            Navigation.NavigateTo("/");
        }
        else
        {
            Console.WriteLine("E-Mail is already taken.");
            errorMessageRegistrationEMail = "E-Mail is already taken!";
        }
    }

}

}