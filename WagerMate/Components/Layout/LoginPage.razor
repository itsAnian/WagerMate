@page "/login"
@layout LoginLayout
@using System.ComponentModel.DataAnnotations
@rendermode InteractiveServer
@using WagerMate.Data
@using WagerMate.Services
@inject IUserService service;
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.Components.Authorization;
@using System.Security.Claims;
@using System.Threading.Tasks;

<div class="column">
<div id="leftSide" class="half">
    <h1>WagerMate</h1>

    <p>Welcome Back!</p>

    <EditForm Model="@_existingUserData" OnValidSubmit="HandleLogin" FormName="test1">
        <DataAnnotationsValidator/>
        <div class="field">
            <div><label>E-mail address:</label></div>
            <InputText class="input" @bind-Value="_existingUserData.EMail"/>
            <ValidationMessage For=@(() => _existingUserData.EMail) />
            @if (!string.IsNullOrEmpty(errorMessageEMail))
            {
                @errorMessageEMail
            }
        </div>
        <div class="field">
            <div><label>Password:</label></div>
            <InputText class="input" type="password" @bind-Value="_existingUserData.Password"/>
            <ValidationMessage For=@(() => _existingUserData.Password) />
            @if (!string.IsNullOrEmpty(errorMessagePassword))
            {
                @errorMessagePassword
            }
        </div>
        <div id="loginspace"><input id="login" type="submit" value="Log in" /></div>
    </EditForm>
</div>

<div id="rightSide" class="half">
    <h1>WagerMate</h1>

    <p>Welcome Mate!</p>

    <EditForm Model="@_newUserData" OnValidSubmit="RegisterTest" FormName="test2">
        <DataAnnotationsValidator/>
        <div class="field">
            <div><label>Username:</label></div>
            <InputText class="input" @bind-Value="_newUserData.Username"/>
            <ValidationMessage For=@(() => _newUserData.Username) />
        </div>
        <div class="field">
            <div><label>E-mail address:</label></div>
            <InputText class="input" @bind-Value="_newUserData.EMail"/>
            <ValidationMessage For=@(() => _newUserData.EMail) />
            @if (!string.IsNullOrEmpty(errorMessageRegistrationEMail))
            {
                @errorMessageRegistrationEMail
            }
        </div>
        <div class="field">
            <div><label>Password:</label></div>
            <InputText class="input" type="password" @bind-Value="_newUserData.Password"/>
            <ValidationMessage For=@(() => _newUserData.Password) />
        </div>
        <div class="field">
            <div><label>Repeat Password:</label></div>
            <InputText class="input" type="password" @bind-Value="_newUserData.PasswordRepeat"/>
            <ValidationMessage For=@(() => _newUserData.PasswordRepeat) />
        </div>
        <div class="field">
            <div><label>Enter Invite Code:</label></div>
            <InputText class="input"  @bind-Value="_newUserData.InviteCode"/>
            <ValidationMessage For=@(() => _newUserData.InviteCode) />
        </div>
        <div id="registerspace"><input id="register" type="submit" value="Register"></div>
    </EditForm>
</div>
</div>



@code {
    private ExistingUserData _existingUserData = new ExistingUserData();
    
    public class ExistingUserData
    {
        [Required (ErrorMessage = "E-mail address is required!")]
        [EmailAddress(ErrorMessage = "Invalid e-mail address!")]
        public string? EMail { get; set; }
        [Required (ErrorMessage = "Password is required!")]
        public string? Password { get; set; }
    }

    private NewUserData _newUserData = new NewUserData();

    public class NewUserData
    {
        [Required (ErrorMessage = "E-mail address is required!")]
        [EmailAddress(ErrorMessage = "Invalid e-mail address!")]
        public string? EMail { get; set; }
        [Required (ErrorMessage = "Username is required!")]
        public string? Username { get; set; }
        [Required (ErrorMessage = "Password is required!")]
        public string? Password { get; set; }
        [Required (ErrorMessage = "Repetition of password is required!")]
        [Compare("Password", ErrorMessage = "Must match Password!")]
        public string? PasswordRepeat { get; set; }
        [Required (ErrorMessage = "Invite code is required!")]
        [CompareInviteCode("42", ErrorMessage = "Invalid invite code!")]
        public string? InviteCode { get; set; }
    }
    
    private LoginModel _loginModel = new LoginModel();
    
    private class LoginModel
    {
        public string? EMail { get; set; }
        public string? Password { get; set; }
    }

    public class CompareInviteCodeAttribute : ValidationAttribute
    {
        private readonly string _validCode;

        public CompareInviteCodeAttribute(string validCode)
        {
            _validCode = validCode;
        }

        protected override ValidationResult? IsValid(object? value, ValidationContext validationContext)
        {
            if (value == null || value.ToString() != _validCode)
            {
                return new ValidationResult(ErrorMessage ?? "Invalid invite code!");
            }

            return ValidationResult.Success;
        }
    }

    
    private void CreateUser()
    {
        Console.WriteLine("Register New User");
        User user2 = new User();
        
        user2.Name = _newUserData.Username;
        user2.Email = _newUserData.EMail;
        user2.Password = _newUserData.Password;

        Console.WriteLine("user locally registered");
        try
        {
            service.CreateUser(user2);
        }
        catch (Exception e)
        {
            Console.WriteLine("service failled");
        }
    }
 
    private async Task HandleLogin()
    {
        try {
            var result = service.GetUserByEmail(_existingUserData.EMail);
            if (result.Password == _existingUserData.Password)
            {
                Console.WriteLine("Login successful.");
                /*var claims = new List<Claim>
                {
                    new Claim(ClaimTypes.Email, result.Email)
                };
 
                var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
                var principal = new ClaimsPrincipal(identity);
 
                await HttpContextAccessor.HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, principal);*/
                
                Authentication.MarkUserAsAuthenticated(result.Email);
 
                Navigation.NavigateTo("/");
            }
            else
            {
                Console.WriteLine("Invalid password.");
                errorMessagePassword = "Invalid Password!";
                errorMessageEMail = null;
            }
        }
        catch (Exception e) {
            Console.WriteLine(e);
            Console.WriteLine("Not registered E-Mail.");
            errorMessageEMail = "No account with this e-mail address exists!";
        }
    }

    private CustomAuthenticationStateProvider Authentication = new CustomAuthenticationStateProvider();
    
    public class CustomAuthenticationStateProvider : AuthenticationStateProvider
    {
        private ClaimsPrincipal _anonymous = new ClaimsPrincipal(new ClaimsIdentity());

        public override Task<AuthenticationState> GetAuthenticationStateAsync()
        {
            return Task.FromResult(new AuthenticationState(_anonymous));
        }

        public void MarkUserAsAuthenticated(string email)
        {
            var claims = new List<Claim>
            {
                new Claim(ClaimTypes.Name, email)
            };

            var authenticatedUser = new ClaimsPrincipal(new ClaimsIdentity(claims, "apiauth"));
            var authState = Task.FromResult(new AuthenticationState(authenticatedUser));

            NotifyAuthenticationStateChanged(authState);
        }

        public void MarkUserAsLoggedOut()
        {
            var anonymous = new ClaimsPrincipal(new ClaimsIdentity());
            var authState = Task.FromResult(new AuthenticationState(anonymous));

            NotifyAuthenticationStateChanged(authState);
        }
    }

    private string? errorMessageEMail;
    private string? errorMessagePassword;

    public void LoginTest() {
        try {
            var result = service.GetUserByEmail(_existingUserData.EMail);
            if (result.Password == _existingUserData.Password)
            {
                Console.WriteLine("Login successful.");
            }
            else
            {
                Console.WriteLine("Invalid password.");
                errorMessagePassword = "Invalid Password!";
            }
        }
        catch (Exception e) {
            Console.WriteLine(e);
            Console.WriteLine("Not registered E-Mail.");
            errorMessageEMail = "No account with this e-mail address exists!";
        }
        
    }

    private string? errorMessageRegistrationEMail;

    public void RegisterTest() {
        try {
            var result = service.GetUserByEmail(_newUserData.EMail);
            if (result == null) {
                CreateUser();
            }

            if (result != null) {
                Console.WriteLine("E-Mail is already taken.");
                errorMessageRegistrationEMail = "E-Mail is already taken!";
            }
        }
        catch (Exception e) {
            Console.WriteLine(e);
            Console.WriteLine("E-Mail is already registered.");
            errorMessageRegistrationEMail = "E-Mail is already registered!";
        }
    }
    
}