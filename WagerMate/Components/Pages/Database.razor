@page "/db"
@using WagerMate.Services.betting
@using WagerMate.Services.user
@rendermode InteractiveServer
<PageTitle>Database</PageTitle>
<h3>Database</h3>

<p>This page displays data from Postgresdb</p>
<br>
<br>
<p>These buttons display data for users</p>

@inject IUserService UserService;
<button class="btn btn-primary" @onclick="DeleteUser">DeleteUser</button>
<button class="btn btn-primary" @onclick="CreateUser">CreateUser</button>
<button class="btn btn-primary" @onclick="CreateUser2">CreateUser2</button>
<button class="btn btn-primary" @onclick="GetAllUsers">getAllUsers(Console)</button>
<button class="btn btn-primary" @onclick="UpdateUser">UpdateUser</button>
<button class="btn btn-primary" @onclick="GetUserByIdConsole">GetUserByIdConsole</button>
@inject IBetService BetService;
<br>
<br>
<p>These buttons display data for bets</p>
<button class="btn btn-primary" @onclick="DeleteBet">DeleteBet</button>
<button class="btn btn-primary" @onclick="CreateBet">CreateBet</button>
<button class="btn btn-primary" @onclick="CreateBet2">CreateBet2</button>
<button class="btn btn-primary" @onclick="GetAllBets">getAllBets(Console)</button>
<button class="btn btn-primary" @onclick="UpdateBet">UpdateBet</button>
<button class="btn btn-primary" @onclick="GetBetByIdConsole">GetBetByIdConsole</button>
<br>


<br>
<p>These buttons display data for UserBet</p>

@inject IUserBetService UserBetService;
<button class="btn btn-primary" @onclick="AddUserBet">CreateUserBet</button>
<button class="btn btn-primary" @onclick="DeleteUserBet">DeleteUserBet</button>
<button class="btn btn-primary" @onclick="DeleteUserBet2">DeleteUserBet2</button>
<button class="btn btn-primary" @onclick="GetUserBetById">GetUserBetById</button>
<button class="btn btn-primary" @onclick="ConsoleGetAllUserIdsFromBet">ConsoleGetAllUserIdsFromBet</button>
<br/>

<p>WinnerService Buttons</p>
@inject  IWinnerService ServiceWinner;
<button class="btn btn-primary" @onclick="CreateWinnerTest">CreateWinnerTest</button>
<button class="btn btn-primary" @onclick="DeleteWinnerId">DeleteWinnerID2</button>
<button class="btn btn-primary" @onclick="UpdateWinner">UpdateWinner</button>
<button class="btn btn-primary" @onclick="ConsoleGetWinnerById">ConsoleGetWinnerById</button>
<button class="btn btn-primary" @onclick="ConsoleGetWinnerByBetId">ConsoleGetWinnerByBet_Id</button>
<br/>
<p>CaseService Buttons</p>
@inject ICaseService ServiceCase;
<button class="btn btn-primary" @onclick="CaseCreate">CaseCreate</button>
<button class="btn btn-primary" @onclick="CaseDelete">CaseDelete</button>
<button class="btn btn-primary" @onclick="CaseDeleteByBetId">CaseDeleteByBetId</button>
<button class="btn btn-primary" @onclick="CaseUpdate">CaseUpdate</button>
<button class="btn btn-primary" @onclick="ConsoleGetCase">ConsoleGetCase</button>
<button class="btn btn-primary" @onclick="ConsoleGetCasesByBet">ConsoleGetCasesByBet</button>


@code {

    public void GetUserByIdConsole()
    {
        try
        {
            var user = UserService.GetUserById(1);
            Console.WriteLine(user.Name);
            Console.WriteLine(user.Id);
        }
        catch (Exception e)
        {
            Console.WriteLine("GetUserById failed");
            Console.WriteLine(e);
        }
    }

    public void UpdateUser()
    {
        var updatedU = new User();
        updatedU.Name = "1update";
        updatedU.Email = "1updat@email";
        updatedU.Password = "1updatedPW";
        updatedU.Id = 1;

        var result = UserService.UpdateUser(updatedU);
        Console.WriteLine($"Updating User succesful: {result}");
    }

    private void GetAllUsers()
    {
        Console.WriteLine("Get ALl Users executing: ");
        var result = UserService.GetAllUsers();
        foreach (var user in result)
        {
            Console.WriteLine(user.Name);
        }
    }

    private void DeleteUser()
    {
        Console.WriteLine("DeleteUser");
        UserService.DeleteUser(1);
    }

    private void CreateUser()
    {
        Console.WriteLine("CreateUser");
        UserService.CreateUser(InitUser());
    }

    private void CreateUser2()
    {
        Console.WriteLine("CreateUser2");
        // create dummy user
        var user2 = new User();

        user2.Name = "user2";
        user2.Email = "user2com";
        user2.Password = "12345";

        Console.WriteLine("user locally created");
        try
        {
            UserService.CreateUser(user2);
        }
        catch (Exception)
        {
            Console.WriteLine("service failed");
        }
    }

    public User InitUser()
    {
        var user = new User();
        user.Name = "tobi";
        user.Email = "tobi@tobi.com";
        user.Password = "1234";
        return user;
    }

    // Test for bets
    public void GetBetByIdConsole()
    {
        try
        {
            var result = BetService.GetBetById(47);
            Console.WriteLine(result.Id);
            Console.WriteLine(result.Description);
        }
        catch (Exception e)
        {
            Console.WriteLine("Getbetbyid failed");
            Console.WriteLine(e);
        }
    }

    public void UpdateBet()
    {
        var updatedB = new Bet();
        updatedB.Title = "Updated Titel";
        updatedB.Description = "updated description";
        updatedB.InvitationCode = "ALJFKDKJFSDL";
        updatedB.Access = Access.Restricted;
        updatedB.State = State.Closed;
        updatedB.Id = 47;

        var result = BetService.UpdateBet(updatedB);
        Console.WriteLine($"Updating Bet succesful: {result}");
    }

    private void GetAllBets()
    {
        Console.WriteLine("Get ALl Bets executing: ");
        var result = BetService.GetAllBets();
        foreach (var bet in result)
        {
            Console.WriteLine(bet.Description);
        }
    }

    private void DeleteBet()
    {
        Console.WriteLine("DeleteBet");
        UserService.DeleteUser(51);
    }

    private void CreateBet()
    {
        Console.WriteLine("CreateBet");
        var createdBet = BetService.CreateBet(InitBet());
        Console.WriteLine("betId: " + createdBet.Id);
    }

    private void CreateBet2()
    {
        Console.WriteLine("CreateBet2");
        // create dummy bet
        var bet2 = new Bet();

        bet2.Title = "Titel2";
        bet2.Description = "This is a newwwwwww test description for a bet";
        bet2.InvitationCode = "LSDJFHSGAJDIEWU";
        bet2.Created = DateTime.Now;
        bet2.Expiration = DateTime.Now.AddYears(50);
        bet2.Access = Access.Public;
        bet2.State = State.Pending;

        Console.WriteLine("bet locally created");
        try
        {
            BetService.CreateBet(bet2);
        }
        catch (Exception)
        {
            Console.WriteLine("service failed");
        }
    }

    public Bet InitBet()
    {
        var bet = new Bet();
        bet.Title = "Titel";
        bet.Description = "This is a test description for a bet";
        bet.InvitationCode = "SDFHUKSNVBSHEIFWE";
        bet.Created = DateTime.Now;
        bet.Expiration = DateTime.Now.AddYears(50);
        bet.Access = Access.Private;
        bet.State = State.Active;
        return bet;
    }


    // Tests for UserBets

    private void AddUserBet()
    {
        Console.WriteLine("CreateUserBet");
        var userBetId = UserBetService.CreateUserBet(InitUserBet());
        Console.WriteLine("UserBetId: " + userBetId);
    }

    private UserBet InitUserBet()
    {
        var userBet = new UserBet();
        userBet.Bet_Id = 1;
        userBet.User_Id = 1;
        userBet.Amount = 1;
        userBet.Case_Id = 1;
        return userBet;
    }

    private void DeleteUserBet()
    {
        var testuser = new User();
        testuser.Id = 1;
        var testbet = new Bet();
        testbet.Id = 1;
        Console.WriteLine("DeleteUserBet user+bet");
        UserBetService.DeleteUserBet(testuser, testbet);
    }

    private void DeleteUserBet2()
    {
        var userBet = new UserBet();
        userBet.Id = 1;
        Console.WriteLine("DeleteUserBet userbet");
        UserBetService.DeleteUserBet(userBet);
    }

    private void GetUserBetById()
    {
        try
        {
            var result = UserBetService.GetUserBetById(1);
            Console.WriteLine(result.Id);
            Console.WriteLine(result.User_Id);
            Console.WriteLine(result.Bet_Id);
        }
        catch (Exception e)
        {
            Console.WriteLine("GetUserBetByBetId failed");
            Console.WriteLine(e);
        }
    }

    private void ConsoleGetAllUserIdsFromBet()
    {
        Console.WriteLine("Get ALl UserIdsFromBet executing: ");
        var bet = new Bet();
        bet.Id = 1;
        var result = UserBetService.GetAllUserIdsFromBet(bet);
        foreach (var userId in result)
        {
            Console.WriteLine(userId);
        }
    }


    private void CreateWinnerTest()
    {
        var newWinner = new Winner();
        newWinner.Bet_Id = 1;
        newWinner.UserBet_Id = 1;
        ServiceWinner.CreateWinner(newWinner);
    }

    private void DeleteWinnerId()
    {
        ServiceWinner.DeleteWinner(1);
    }

    private void UpdateWinner()
    {
        var newWinner = new Winner();
        newWinner.Bet_Id = 1;
        newWinner.Id = 1;
        newWinner.UserBet_Id = 1;
        ServiceWinner.UpdateWinner(newWinner);
    }

    private void ConsoleGetWinnerById()
    {
        Console.WriteLine(ServiceWinner.GetWinnerById(1));
    }

    private void ConsoleGetWinnerByBetId()
    {
        Console.WriteLine("WinnerByBetsId");
        var winners = ServiceWinner.GetWinnersByBetId(2);
        foreach (var winner in winners)
        {
            Console.WriteLine(winner.Id);
        }
    }

    private void CaseCreate()
    {
        var newCase = new Case();
        newCase.Bet_Id = 1;
        newCase.Casetype = "Case";
        var caseId = ServiceCase.CreateCase(newCase);
        Console.WriteLine("CreateCase CaseId: " + caseId);
    }

    private void CaseDelete()
    {
        ServiceCase.DeleteCase(1);
    }

    private void CaseDeleteByBetId()
    {
        ServiceCase.DeleteCasesOfBetId(1);
    }

    private void CaseUpdate()
    {
        var updateCase = new Case();
        updateCase.Casetype = "bb";
        updateCase.Id = 1;
        updateCase.Bet_Id = 1;
        ServiceCase.UpdateCase(updateCase);
    }

    private void ConsoleGetCase()
    {
        Console.WriteLine("CaseID2: ");
        Console.WriteLine(ServiceCase.GetCaseById(2));
    }

    private void ConsoleGetCasesByBet()
    {
        Console.WriteLine("GetCasesByBetId2: ");
        Console.WriteLine(ServiceCase.GetCasesByBetId(2));
    }

}