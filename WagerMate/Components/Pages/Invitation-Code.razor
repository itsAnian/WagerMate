@page "/invitation-code"
@page "/invitation-code/{ParamInviteCode}"
@using WagerMate.Service_Implementation.auth
@using WagerMate.Service_Implementation.betting
@using WagerMate.Service_Implementation.user
@using WagerMate.Services.auth
@using WagerMate.Services.betting
@using WagerMate.Services.user
@rendermode InteractiveServer
@inject IBetService BetService
@inject ICaseService CaseService
@inject IUserBetService UserBetService
@inject ICookieService CookieService
@inject IUserService UserService
@inject NavigationManager Navigation

<PageTitle>Invitation Code</PageTitle>

<h1>Invitation Link</h1>
    <div class="form-container">
        
        @if (!DisplayBetInputs)
        {
            <div class="form-group">
                <label for="inviteCode">Invite Code:</label>
                <input @bind="inviteCode" class="form-control" id="inviteCode" placeholder="Enter your invitation code here..."/>
            </div>

            <button class="submit-btn" @onclick="SubmitCode">Submit</button>
        }

        @if (DisplayBetInputs)
        {
            <h2>Submit Bet</h2>
            
            <div class="form-group">
                <label>Title:</label>
                <p>@_acceptedBet.Title</p>            
            </div>

            <div class="form-group">
                <label>Description:</label>
                <p>@_acceptedBet.Description</p>
            </div>

            <div class="form-group">
                <label>State:</label>
                <p>@_betStateString</p>
            </div>

            <div class="form-group">
                <label for="moneyValue">Amount:</label>
                <input id="moneyValue" type="number" @bind="_moneyValue" />
            </div>

            <button class="submit-btn" @onclick="SubmitValues">Submit</button>
        }
        @if (CreatedNewUserBet)
        {
        <p class="alert alert-success">You are now participating in the bet!</p>
        }
    </div>
    

@if (HasNotificationMessage)
{
<p class=@NotificationClass>@NotificationMessage</p>
}

@code {
    //AutoRedirect to the LoginPage
    private bool _firstLogin = true;
    private User? _loggedInUser = new();
    private string inviteCodePlaceholder = "Enter your invitation code here...";
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await CookieService.RedirectToLogin("CookieID", Navigation);
        var value = await CookieService.GetCookieByName("CookieID");
        if (_firstLogin)
        {
            _loggedInUser = UserService.GetUserIfPasswordExists(value);
            if (_loggedInUser != null)
            {
                _firstLogin = false;
            }
        }
    }
    
    private string inviteCode { get; set; }
    private bool DisplayBetInputs { get; set; } = false;
    private int _moneyValue { get; set; }
    private Bet _acceptedBet { get; set; }
    private bool CreatedNewUserBet { get; set; }
    private string _betStateString { get; set; }
    private bool HasNotificationMessage { get; set; }
    private string NotificationMessage { get; set; }
    private string NotificationClass { get; set; }
    

    private void SubmitCode()
    {
        _acceptedBet = BetService.GetBetByInviteCode(inviteCode);
        if (_acceptedBet == null)
        {
            inviteCode = "";
            inviteCodePlaceholder = "Invite Code does not exist!";
            StateHasChanged();
            return;
        }
        if (_acceptedBet.BetState == State.Active) _betStateString = "Active";
        if (_acceptedBet.BetState == State.Closed) _betStateString = "Closed";
        if (_acceptedBet.BetState == State.Pending) _betStateString = "Pending";
        
        DisplayBetInputs = true;
    }

    private void SubmitValues()
    {
        //create case
        Case tempCase = new Case();
        tempCase.Bet_Id = _acceptedBet.Id;
        tempCase.Casetype = "Money";
        tempCase.Id = CaseService.CreateCase(tempCase);
        
        //create userbet
        UserBet tempUserBet = new UserBet();
        tempUserBet.Bet_Id = _acceptedBet.Id;
        tempUserBet.User_Id = _loggedInUser.Id;
        tempUserBet.Amount = _moneyValue;
        tempUserBet.Case_Id = tempCase.Id;

        List<Bet> ParticipatingInBetWithId = BetService.GetBetsByUserId(_loggedInUser.Id);
        if (ParticipatingInBetWithId.All(bet => bet.Id != _acceptedBet.Id))
        {
            UserBetService.CreateUserBet(tempUserBet);
            CreatedNewUserBet = true;
        }
        else
        {
            HasNotificationMessage = true;
            NotificationMessage = "You already are participating in this Bet!";
            NotificationClass = "alert alert-danger";
        }
        
    }
    
    [Parameter]
    public string? ParamInviteCode { get; set; }
    
    protected override void OnParametersSet()
    {
        if (ParamInviteCode != null)
        inviteCode = ParamInviteCode;
        StateHasChanged();
    }

}
