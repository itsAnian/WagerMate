@page "/user"
@using System.ComponentModel.DataAnnotations
@using WagerMate.Services.auth
@using WagerMate.Services.user
@inject NavigationManager Navigation
@inject ICookieService CookieService;
@inject IUserService UserService;
@inject IHashService HashService;

@rendermode InteractiveServer


<h1>Profile Settings</h1>
@if (!_editingUsername)
{
    <div style="margin-top: 20px">
        <b>Username:</b> @_loggedInUser.Name
    </div>
    <div style="margin-top: 10px; margin-bottom: 10px;">
        <input type="button" value="Edit Username" @onclick="@EnableEditingUsername"/>
    </div>
}
else
{
    <EditForm Model="@_loggedInUser" FormName="testUsername">
        <DataAnnotationsValidator/>
        <div>
            <div>
                <label>Username:</label>
            </div>
            <InputText @bind-Value="_editedUserData.Username"/>
        </div>
        <div id="registerspace">
            <input type="button" value="Cancel" @onclick="@CancelEditingUsername"/>
            <input type="submit" value="Save" @onclick="@EditUsername"/>
        </div>
    </EditForm>
}

@if (!_editingEMail)
{
    <div style="margin-top: 20px">
        <b>E-mail address:</b> @_loggedInUser.Email
    </div>
    <div style="margin-top: 10px; margin-bottom: 10px;">
        <input type="button" value="Edit E-mail address" @onclick="@EnableEditingEMail"/>
    </div>
}
else
{
    <EditForm Model="@_loggedInUser" FormName="testEMail">
        <DataAnnotationsValidator/>
        <div>
            <div>
                <label>E-mail address:</label>
            </div>
            <InputText type="email" @bind-Value="_editedUserData.EMail"/>
        </div>
        <div id="registerspace">
            <input type="button" value="Cancel" @onclick="@CancelEditingEMail"/>
            <input type="submit" value="Save" @onclick="@EditEMail"/>
        </div>
    </EditForm>
}
@if (!_editingPassword)
{
    <div style="margin-top: 20px">
        <b>Password: ************ </b>
    </div>
    <div style="margin-top: 10px; margin-bottom: 10px;">
        <input type="button" value="Edit Password" @onclick="@EnableEditingPassword"/>
    </div>
}
else
{
    <EditForm Model="@_loggedInUser" FormName="testPassword">
        <DataAnnotationsValidator/>
        <div>
            <div>
                <label>Password:</label>
            </div>
            <InputText type="password" @bind-Value="_editedUserData.Password"/>
        </div>
        <div>
            <div>
                <label>Repeat Password:</label>
            </div>
            <InputText type="password" @bind-Value="_editedUserData.PasswordRepeat"/>
            <ValidationMessage For=@(() => _editedUserData.PasswordRepeat)/>
        </div>
        <div id="registerspace">
            <input type="button" value="Cancel" @onclick="@CancelEditingPassword"/>
            <input type="submit" value="Save" @onclick="@EditPassword"/>
        </div>
    </EditForm>
}

@code{
    //AutoRedirect to the LoginPage
    private bool _firstLogin = true;
    private User _loggedInUser = new User();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await CookieService.RedirectToLogin("CookieID", Navigation);
        var value = await CookieService.GetCookieByName("CookieID");
        Console.WriteLine(value);
        if (_firstLogin)
        {
            _loggedInUser = UserService.GetUserByPassword(value);
            _firstLogin = false;
        }
    }

    readonly EditedUserData _editedUserData = new();

    public class EditedUserData
    {
        public string? Username { get; set; }
        public string? EMail { get; set; }
        public string? Password { get; set; }

        [Compare("Password", ErrorMessage = "Must match Password!")]
        public string? PasswordRepeat { get; set; }
    }

    private bool _editingUsername;
    private bool _editingEMail;
    private bool _editingPassword;

    private void EnableEditingUsername()
    {
        _editingUsername = true;
    }

    private void EnableEditingEMail()
    {
        _editingEMail = true;
    }

    private void EnableEditingPassword()
    {
        _editingPassword = true;
    }

    private void CancelEditingUsername()
    {
        _editingUsername = false;
    }

    private void CancelEditingEMail()
    {
        _editingEMail = false;
    }

    private void CancelEditingPassword()
    {
        _editingPassword = false;
    }

    // Needs to be replaced with a function to write values into a database
    private void EditUsername()
    {
        if (_editedUserData.Username == null) return;
        User tempUser = new User(_loggedInUser.Id, _editedUserData.Username, _loggedInUser.Email!, _loggedInUser.Password!);
        var updateSuccessful = UserService.UpdateUser(tempUser);
        if (updateSuccessful) _loggedInUser = tempUser;
        _editingUsername = false;
    }


    private void EditEMail()
    {
        if (_editedUserData.EMail == null) return;
        User tempUser = new User(_loggedInUser.Id, _loggedInUser.Name!, _editedUserData.EMail, _loggedInUser.Password!);
        var updateSuccessful = UserService.UpdateUser(tempUser);
        if (updateSuccessful) _loggedInUser = tempUser;
        _editingEMail = false;
    }

    private void EditPassword()
    {
        var hashed = HashService.CreateHash(_editedUserData.EMail!, _loggedInUser.Password!);
        User tempUser = new User(_loggedInUser.Id, _loggedInUser.Name!, _loggedInUser.Email!, hashed);
        var updateSuccessful = UserService.UpdateUser(tempUser);
        if (updateSuccessful)
        {
            CookieService.SetCookieByNameAndValue("CookieID", tempUser.Password!, 7);
            _loggedInUser = tempUser;
        }
        _editingPassword = false;
    }
}