@page "/user"
@using System.ComponentModel.DataAnnotations
@inject NavigationManager navigation
@inject ISessionStorageService sessionStorage
@inject IUserService userService;
@rendermode InteractiveServer


<h1>Profile Settings</h1>
@if (!EditingUsername)
{
    <div style="margin-top: 20px">
        <b>Username:</b> @loggedInUser.Name
    </div>
    <div style="margin-top: 10px; margin-bottom: 10px;">
        <input type="button" value="Edit Username" @onclick="@EnableEditingUsername"/>
    </div>
}
else
{
    <EditForm Model="@loggedInUser" FormName="testUsername">
        <DataAnnotationsValidator/>
        <div>
            <div>
                <label>Username:</label>
            </div>
            <InputText @bind-Value="_editedUserData.Username"/>
        </div>
        <div id="registerspace">
            <input type="button" value="Cancel" @onclick="@CancelEditingUsername"/>
            <input type="submit" value="Save" @onclick="@EditUsername"/>
        </div>
    </EditForm>
}

@if (!EditingEMail)
{
    <div style="margin-top: 20px">
        <b>E-mail address:</b> @loggedInUser.Email
    </div>
    <div style="margin-top: 10px; margin-bottom: 10px;">
        <input type="button" value="Edit E-mail address" @onclick="@EnableEditingEMail"/>
    </div>
}
else
{
    <EditForm Model="@loggedInUser" FormName="testEMail">
        <DataAnnotationsValidator/>
        <div>
            <div>
                <label>E-mail address:</label>
            </div>
            <InputText type="email" @bind-Value="_editedUserData.EMail"/>
        </div>
        <div id="registerspace">
            <input type="button" value="Cancel" @onclick="@CancelEditingEMail"/>
            <input type="submit" value="Save" @onclick="@EditEMail"/>
        </div>
    </EditForm>
}
@if (!EditingPassword)
{
    <div style="margin-top: 20px">
        <b>Password: ************ </b>
    </div>
    <div style="margin-top: 10px; margin-bottom: 10px;">
        <input type="button" value="Edit Password" @onclick="@EnableEditingPassword"/>
    </div>
}
else
{
    <EditForm Model="@loggedInUser" FormName="testPassword">
        <DataAnnotationsValidator/>
        <div>
            <div>
                <label>Password:</label>
            </div>
            <InputText type="password" @bind-Value="_editedUserData.Password"/>
        </div>
        <div>
            <div>
                <label>Repeat Password:</label>
            </div>
            <InputText type="password" @bind-Value="_editedUserData.PasswordRepeat"/>
            <ValidationMessage For=@(() => _editedUserData.PasswordRepeat)/>
        </div>
        <div id="registerspace">
            <input type="button" value="Cancel" @onclick="@CancelEditingPassword"/>
            <input type="submit" value="Save" @onclick="@EditPassword"/>
        </div>
    </EditForm>
}

@code{
    //AutoRedirect to the LoginPage
    public User loggedInUser = new User();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var sessionStorageObj = new SessionStorage();
        await sessionStorageObj.RedirectToLogin("SessionID", sessionStorage, navigation);
        var value = await sessionStorage.GetItemAsync<string>("SessionID");
        Console.WriteLine(value);
        if (value != null) loggedInUser = userService.GetUserByPassword("timmi");
    }

    readonly EditedUserData _editedUserData = new();

    public class EditedUserData
    {
        public string? Username { get; set; }
        public string? EMail { get; set; }
        public string? Password { get; set; }

        [Compare("Password", ErrorMessage = "Must match Password!")]
        public string? PasswordRepeat { get; set; }
    }

    public bool EditingUsername;
    public bool EditingEMail;
    public bool EditingPassword;

    public void EnableEditingUsername()
    {
        EditingUsername = true;
    }

    public void EnableEditingEMail()
    {
        EditingEMail = true;
    }

    public void EnableEditingPassword()
    {
        EditingPassword = true;
    }

    public void CancelEditingUsername()
    {
        EditingUsername = false;
    }

    public void CancelEditingEMail()
    {
        EditingEMail = false;
    }

    public void CancelEditingPassword()
    {
        EditingPassword = false;
    }

    // Needs to be replaced with a funtion to write values into a database
    public void EditUsername()
    {
        User tempUser = new User(loggedInUser.Id, _editedUserData.Username, loggedInUser.Email, loggedInUser.Password);
        var updateSuccesful = userService.UpdateUser(tempUser);
        if (updateSuccesful) loggedInUser = tempUser;
        EditingUsername = false;
    }

    public void EditEMail()
    {
        User tempUser = new User(loggedInUser.Id, loggedInUser.Name, _editedUserData.EMail, loggedInUser.Password);
        var updateSuccesful = userService.UpdateUser(tempUser);
        if (updateSuccesful) loggedInUser = tempUser;
        EditingEMail = false;
    }

    public void EditPassword()
    {
        
        User tempUser = new User(loggedInUser.Id, loggedInUser.Name, loggedInUser.Email, _editedUserData.Password);
        var updateSuccesful = userService.UpdateUser(tempUser);
        if (updateSuccesful) loggedInUser = tempUser;
        EditingPassword = false;
    }

}