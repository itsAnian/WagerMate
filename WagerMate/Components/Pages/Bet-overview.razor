@page "/"
@using WagerMate.Data.bet
@using WagerMate.Data.enums
@using WagerMate.Data.user
@using WagerMate.Services.betting
@using WagerMate.Services.user
@rendermode  InteractiveServer
@inject IBetService BetService;
@inject IUserService UserService;
@inject ICaseService CaseService;
@inject ICookieService CookieService;
@inject IUserBetService UserBetService;
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime

@inherits BasePage;

@inject IBetSettlingService BetSettlingService
@inject IWinnerService WinnerService

<PageTitle>Bet Overview</PageTitle>

<div id="pageHeader">
    <h1>Bet Overview</h1>
</div>

<!-- Popup Form Bet Details-->
@if (_isDetailsPopupVisible)
{
<div id="popup-overlay" class="active">
    <div id="popup-content" @onclick:stopPropagation="true">
        <h2 id="h2PopUpBetDetails">Bet Details</h2>
        <div class="bet-details-container">
            <div class="bet-detail">
                <label class="detail-label">Title:</label>
                <span class="detail-value">@_betPopup.Title</span>
            </div>
            <div class="bet-detail">
                <label class="detail-label">Description:</label>
                <span class="detail-value detail-value-description">@_betPopup.Description</span>
            </div>
            <div class="bet-detail">
                <label class="detail-label">Selected Option:</label>
                <span class="detail-value">@PopupUserCase!.Casetype</span>
            </div>
            @if (_betPopup.State != State.Closed)
            {
            <div class="bet-detail">
                <label class="detail-label">Bet Amount:</label>
                <span class="detail-value">@_userBetPopup.Amount</span>
            </div>
            }
            else
            {
            // winning or losing amount
            if (PopupDetailsWinner != null)
            {
                <div class="bet-detail">
                    <label class="detail-label">Bet Amount:</label>
                    <span class="detail-value">@_userBetPopup.Amount</span>
                </div>
                <div class="bet-detail">
                    <label class="detail-label">Winning Amount:</label>
                    <span class="detail-value">@PopupDetailsWinner.Amount</span>
                </div>
            }
            else
            {
            <div class="bet-detail">
                <label class="detail-label">Lost Amount:</label>
                <span class="detail-value">@_userBetPopup.Amount</span>
            </div>
            }

            @if (WinnersList!.Count > 0) {
            <div class="winnerList">
                <div class="winner-header">
                    @if(WinnersList.Count == 1)
                    {
                    <p>Winner</p>
                    } else
                    {
                    <p>Winners</p>
                    }
                </div>
                @foreach (string winnerName in WinnerNameList) {
                <p>@winnerName</p>
                }
            </div>

            }
            }

            <div class="bet-detail">
                <label class="detail-label">Expiration Date:</label>
                <span class="detail-value">@_betPopup.Expiration.ToShortDateString()</span>
            </div>
            @if(PopupSelectedCases.Count > 0)
            {
            <div class="bet-detail">
                <label class="detail-label">Winning options: </label>
                @foreach (SelectedCase popupSelectedCase in PopupSelectedCases)
                {
                <span class="detail-value">
                                <input type="checkbox" @bind="popupSelectedCase.IsSelected" disabled="@(_betPopup.State == State.Closed)" /> @popupSelectedCase.Case.Casetype
                            </span>
                }
            </div>
            }
            <div class="button-container">

                @if (_betPopup.State != State.Closed)
                {
                <div class="first-row">
                    <button class="btn btn-secondary" @onclick="DeleteBet">Delete Bet</button>
                    <button class="btn btn-secondary" @onclick="CancelBet">Cancel Bet</button>
                    <button class="btn btn-secondary" @onclick="SettleBet">Settle Bet</button>
                </div>
                <div class="second-row">
                    <button class="btn btn-secondary" @onclick="CopyLinkToClipboard">Copy Invite Link</button>
                    <button class="btn btn-secondary" @onclick="HideDetailsPopup">Exit</button>
                </div>
                }
                else
                {
                    <button class="btn btn-secondary" @onclick="HideDetailsPopup">Exit</button>   
                }
            </div>
        </div>

    </div>
</div>
}

<div id="betOverviewPage">
    <div id="betsCount">
        <h2>Total Bets: @(FilteredBets.Count)</h2>
    </div>
    <div id="creatNewBet">
        <h2>Create a new bet here</h2>
        <button class="new-bet-button" @onclick="ShowPopup">+ New Bet</button>
    </div>

    <div class="check-box-line">
        <div class="bet-state">
            <label for="Accepted">Accepted Bets</label>
            <input type="checkbox" id="Accepted" @bind="DisplayAcceptedBets"/>
        </div>

        <div class="bet-state">
            <label for="Pending">Pending Bets</label>
            <input type="checkbox" id="Pending" @bind="DisplayPendingBets"/>
        </div>

        <div class="bet-state">
            <label for="Closed">Closed Bets</label>
            <input type="checkbox" id="Closed" @bind="DisplayClosedBets"/>
        </div>
    </div>

    @* Listing the bets of the user: *@
    <div id="allBets">
        <h2 class="bets-heading">Here are your bets:</h2>

        <div id="allBetsLayout">
            @foreach (var bet in FilteredBets)
            {
                BackgroundColorIndividualBet = string.Empty;
                BetIcon = string.Empty;
                if (bet.State == State.Active || bet.State == State.Pending) {
                    BackgroundColorIndividualBet = "indiBet-Orange";
                }

                if (bet.State == State.Pending) {
                    BetIcon = "icon-hourglass-split";
                }
                    
                if (bet.State == State.Closed){
                    BetResultText = string.Empty;
                    WinnersList = WinnerService.GetWinnersByBetId(bet.Id);
                    var loggedInUserBet = UserBetService.GetUserBetById(_loggedInUser!.Id, bet.Id);

                    if (WinnersList == null || !WinnersList.Any())
                    {
                        BetResultText = "No one won this bet.";
                        BackgroundColorIndividualBet = "indiBet-Grey";
                    }
                    else if (WinnersList.Any(winner => winner.UserBet_Id == loggedInUserBet.Id))
                    {
                        BetResultText = $"Congratulations! {_loggedInUser.Name}! You are a Winner!";
                        BackgroundColorIndividualBet = "indiBet-Green";
                        BetIcon = "icon-trophy";
                    }
                    else
                    {
                        BetResultText = "You lost this bet.";
                        BackgroundColorIndividualBet = "indiBet-Grey";
                        BetIcon = "icon-lost-bet";
                    }
                }
                    
                <div id="individualBet" class=@BackgroundColorIndividualBet @onclick="() => ShowDetailsPopup(bet)">
                    <div class="bet-header">
                        @if (bet.State == State.Pending) {
                            
                            <strong class="detail-value">@bet.Title</strong><div class="icon-hourglass-split"></div>
                        }
                        
                        else if (bet.State == State.Closed){
                            var loggedInUserBet = UserBetService.GetUserBetById(_loggedInUser!.Id, bet.Id);

                            BetIcon = WinnersList!.Any(winner => winner.UserBet_Id == loggedInUserBet.Id) ? "icon-trophy" : "icon-lost-bet";
                            BetIcon = (WinnersList!.Count == 0) ? "" : BetIcon;
                            <strong class="detail-value">@bet.Title</strong><span class=@BetIcon></span>
                        }
                        else {
                            <strong class="detail-value">@bet.Title</strong>
                        }
                    </div>
                    @if (bet.State == State.Closed) {
                        <strong><span class=@BetIcon></span> @BetResultText</strong>
                        <div class="bet-body">
                            <strong>Description:</strong> <div class="bet-body-value-description">@bet.Description</div>
                            @* <strong>State:</strong> <div class="bet-body-value">@bet.State.ToString()</div> *@
                            <strong>Total amount:</strong> <div class="bet-body-value">@GetTotalAmount(bet)</div>
                        </div>
                    }
                    else {
                        <div class="bet-body">
                            <strong>Description:</strong> <div class="bet-body-value-description">@bet.Description</div>
                            <strong>Total amount:</strong> <div class="bet-body-value">@GetTotalAmount(bet)</div>
                        </div>
                    }
                    <footer class="bet-footer">
                        <span class="bet-date"><strong>Created:</strong> @bet.Created.ToShortDateString()</span>
                        <span class="bet-date"><strong>Expires:</strong> @bet.Expiration.ToShortDateString()</span>
                    </footer>
                </div>
                
            }
        </div>
    </div>
</div>

<!-- Popup Form Creat New Bet-->
@if (_isPopupVisible)
{
    <div id="popup-overlay" class="active">
        <div id="popup-content" @onclick:stopPropagation="true">
            <h2 id="h2PopUpCreateNewBet">Create New Bet</h2>
            <div class="create-bet-container">
                <div class="form-group">
                    <label class="form-label">Title:</label>
                    <input type="text" class="form-input" @bind="_formBetDetails.NewBetTitle" placeholder="Enter bet title" maxlength="@MaxlengthTitle"/>
                </div>
                <div class="form-group">
                    <label class="form-label">Description:</label>
                    <input type="text" class="form-input" @bind="_formBetDetails.NewBetDescription" placeholder="Enter bet description" maxlength="@MaxlengthDescription"/>
                </div>
                <div class="form-group">
                    <label class="form-label">Bet Amount:</label>
                    <input type="number" class="form-input" @bind="_formBetDetails.NewBetMoney" placeholder="Enter amount"/>
                </div>
                <div class="form-group">
                    <label class="form-label">Set Expiration Date:</label>
                    <input type="date" class="form-input" @bind="_formBetDetails.NewBetExpiration" min="@DateTime.Now.ToString("yyyy-MM-dd")"/>
                </div>
                <div class="form-group">
                    <label class="form-label">Your bet option</label>
                    <input type="text" class="form-input" @bind="_formBetDetails.CaseBetCreator" placeholder="e.g., Dice Roll is 1" maxlength="@MaxlengthBetOption"/>
                </div>
                <div class="form-group">
                    <label class="form-label">Other possible bet options</label>
                    @for (int i = 0; i < _dynamicInputs.Count; i++)
                    {
                        int index = i;
                        string tempValue = "e.g., Dice Roll is " + (i + 2).ToString();
                        <input type="text" class="form-input" @oninput="(e) => UpdateInputValue(index, e.Value!.ToString()!)" placeholder=@tempValue maxlength="@MaxlengthBetOption"/>
                    }
                    @if (_dynamicInputs.Count != MaxFields)
                    {
                        <button type="button" class="btn btn-secondary" @onclick="AddInputField">Add bet option</button>
                    }
                </div>
                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <br/>
                    <br/>
                    <div class="alert alert-danger">
                        @ErrorMessage
                    </div>
                }
                <div class="button-group">
                    <button class="btn btn-success create-button" @onclick="CreateNewBet">Create Bet</button>
                    <button class="btn btn-secondary cancel-button" @onclick="HidePopup">Cancel</button>
                </div>
            </div>

        </div>
    </div>
}


@code{
    
    // static values for max input length
    private const int MaxlengthTitle = 100;
    private const int MaxlengthDescription = 1000;
    private const int MaxlengthBetOption = 100;

    private List<Bet> _bets = new();
    private bool _isPopupVisible;
    private bool _firstLogin = true;
    private bool _displayAcceptedBets { get; set; } = true;
    private bool DisplayAcceptedBets { get => _displayAcceptedBets;
        set
        {
            _displayAcceptedBets = value;
            FilterBets();
        }
    }
    private bool _displayPendingBets { get; set; } = true;
    private bool DisplayPendingBets
    {
        get => _displayPendingBets;
        set
        {
            _displayPendingBets = value;
            FilterBets();
        }
    }
    private bool _displayClosedBets { get; set; } = true;
    private bool DisplayClosedBets
    {
        get => _displayClosedBets;
        set
        {
            _displayClosedBets = value;
            FilterBets();
        }
    }
    private User? _loggedInUser = new();
    private FormBetDetails _formBetDetails = new();
    private string? ErrorMessage { get; set; }
    private bool _isDetailsPopupVisible;
    private string _inviteCode = "";
    private List<SelectedCase> PopupSelectedCases { get; set; } = new List<SelectedCase>();
    private Case? PopupUserCase { get; set; }
    private Winner? PopupDetailsWinner { get; set; }
    private List<Winner>? WinnersList { get; set; }
    private List<string> WinnerNameList { get; set; } = new List<string>();
    private string BetResultText { get; set; } = "";
    private string BackgroundColorIndividualBet { get; set; } = "";
    private string BetIcon { get; set; } = "";
    private List<Bet> FilteredBets { get; set; } = new List<Bet>();

    // Define properties and fields
    private static int MaxFields { get; set; } = 5;
    private readonly List<string> _dynamicInputs = new List<string>(MaxFields);

    private double GetTotalAmount(Bet bet)
    {
        return UserBetService.GetAllUserBetsFromBet(bet).Sum(userBet => userBet.Amount);
    }

    // Method to add a new input field
    private void AddInputField()
    {
        if (_dynamicInputs.Count < MaxFields)
        {
            _dynamicInputs.Add(string.Empty);
        }
        else
        {
            // Optionally alert the user if the max is reached
            Console.WriteLine("Maximum number of fields reached.");
        }
    }

    private void UpdateInputValue(int index, string value)
    {
        if (index >= 0 && index < _dynamicInputs.Count)
        {
            _dynamicInputs[index] = value;
        }
    }

    private void ResetFields()
    {
        _dynamicInputs.Clear(); // Clears all input fields
        ErrorMessage = null;
    }

    private Bet _betPopup = new();
    private UserBet _userBetPopup = new();
    public class FormBetDetails
    {
        public string NewBetTitle { get; set; } = null!;
        public string NewBetDescription { get; set; } = null!;
        public uint NewBetMoney { get; set; }
        public DateTime NewBetExpiration { get; set; } = DateTime.Now;
        public string CaseBetCreator { get; set; } = null!;
    }

    private void ShowPopup()
    {
        _isPopupVisible = true;
        _formBetDetails = new FormBetDetails
        {
            NewBetExpiration = DateTime.Now.AddYears(1)
        };
        StateHasChanged();
    }
    
    private void ShowDetailsPopup(Bet bet)
    {
        _userBetPopup = UserBetService.GetUserBetById(_loggedInUser!.Id, bet.Id);
        _betPopup = bet;
        _inviteCode = Navigation.Uri + "invitation-code/" + _betPopup.Invitation_Code;
        PopupSelectedCases = new List<SelectedCase>();
        
        WinnersList = new List<Winner>();
        WinnerNameList = new List<string>();

        List<Case> betCases = CaseService.GetCasesByBetId(_betPopup.Id);
        foreach (Case betCase in betCases)
        {
            var tempSelectedCase = new SelectedCase(betCase, false);
            PopupSelectedCases.Add(tempSelectedCase);
            if (_userBetPopup.Case_Id == betCase.Id)
            {
                PopupUserCase = betCase;
            }
        }

        var maybeWinner = WinnerService.GetWinnerByUserBetIdIfExists(_userBetPopup.Id);
        PopupDetailsWinner = maybeWinner ?? null;
        WinnersList = WinnerService.GetWinnersByBetId(_betPopup.Id);
        
        if (WinnersList.Count > 0)
        {
            List<UserBet> winnerUserBets = new List<UserBet>();
            WinnersList.ForEach(winner => { winnerUserBets.Add(UserBetService.GetUserBetById(winner.UserBet_Id)); });

            List<int> winnerCaseIds = new List<int>();
            List<User> users = new List<User>();
            winnerUserBets.ForEach(userBet =>
            {
                users.Add(UserService.GetUserById(userBet.User_Id)); 
                winnerCaseIds.Add(userBet.Case_Id);
            });

            users.ForEach(user => { WinnerNameList.Add(user.Name!); });
            
            
            foreach (var selectedCase in PopupSelectedCases)
            {
                selectedCase.IsSelected = winnerCaseIds.Contains(selectedCase.Case.Id);
            }
            
        }
        _isDetailsPopupVisible = true;
        StateHasChanged();
    }

    private void HidePopup()
    {
        _isPopupVisible = false;
        StateHasChanged();
        ResetFields();
    }
    
    private void HideDetailsPopup()
    {
        _isDetailsPopupVisible = false;
        StateHasChanged();
    }


    private void CreateNewBet()
    {
        ErrorMessage = string.Empty;

        if (string.IsNullOrWhiteSpace(_formBetDetails.NewBetTitle) ||
            string.IsNullOrWhiteSpace(_formBetDetails.NewBetDescription) ||
            _formBetDetails.NewBetMoney <= 0)
        {
            ErrorMessage = "Please fill out all fields correctly before creating a new bet.";
            return;
        }
        
        if (_formBetDetails.NewBetExpiration < DateTime.Now.Date || _formBetDetails.NewBetExpiration == default)
        {
            ErrorMessage = "The expiration date cannot be in the past.";
            return;
        }

        if (string.IsNullOrEmpty(_formBetDetails.CaseBetCreator))
        {
            ErrorMessage = "You need to enter your bet option.";
            return;
        }

        var newBet = new Bet
        {
            Title = _formBetDetails.NewBetTitle,
            Description = _formBetDetails.NewBetDescription,
            Invitation_Code = Guid.NewGuid().ToString(),
            Created = DateTime.Now,
            Expiration = _formBetDetails.NewBetExpiration,
            Access = Access.Private,
            State = State.Pending
        };
        if (_loggedInUser == null) return;

        try
        {
            // creating Bet, then Case, then UserBet
            var createdBet = BetService.CreateBet(newBet);


            UserBet userBet = new UserBet
            {
                Bet_Id = createdBet.Id,
                User_Id = _loggedInUser.Id,
                Amount = _formBetDetails.NewBetMoney
            };
            var creatorCaseId = CaseService.CreateCase(new Case(createdBet.Id, _formBetDetails.CaseBetCreator));
            userBet.Case_Id = creatorCaseId;
            UserBetService.CreateUserBet(userBet);
            
            // creating all other cases
            foreach (var dynamicInput in _dynamicInputs)
            {
                if (!string.IsNullOrEmpty(dynamicInput))
                {
                    CaseService.CreateCase(new Case(createdBet.Id, dynamicInput));
                }
            }
        }
        catch (Exception)
        {
            Console.WriteLine("BetOverview: service failed");
        }

        HidePopup();
        RenderData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        var value = await CookieService.GetCookieByName("CookieID");
        if (_firstLogin)
        {
            _loggedInUser = UserService.GetUserIfPasswordExists(value);
            if (_loggedInUser != null)
            {
                _firstLogin = false;
                RenderData();
            }
        }
    }

    void RenderData()
    {
        try
        {
            if (_loggedInUser == null) return;
            _bets = BetService.GetBetsByUserId(_loggedInUser.Id);
            _bets.ForEach(bet =>
            {
                if (bet.Expiration.Date < DateTime.Now.Date)
                {
                    bet.State = State.Closed;
                    BetService.UpdateBet(bet);
                }
            });
            FilterBets();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"BetOverview: Error fetching bets - {ex.Message}");
        }
    }
    
    private async Task CopyLinkToClipboard()
    {
        await JsRuntime.InvokeVoidAsync("copyToClipboard", _inviteCode);
    }

    private void SettleBet()
    {
        List<int> idsFromSelectedCases = new List<int>();
        foreach (SelectedCase popupSelectedCase in PopupSelectedCases)
        {
            if(popupSelectedCase.IsSelected) idsFromSelectedCases.Add(popupSelectedCase.Case.Id);
        }
        BetSettlingService.SettleBet(_betPopup, idsFromSelectedCases.ToArray());
        FilterBets();
        _isDetailsPopupVisible = false;
    }

    private void CancelBet()
    {
        UserBet popupUserBet = UserBetService.GetUserBetById(_loggedInUser!.Id, _betPopup.Id);
        BetSettlingService.CloseBet(popupUserBet);
        _isDetailsPopupVisible = false;
        RenderData();
    }

    private void DeleteBet()
    {
        // delete Winner, UserBet, Case and then Bet
        List<Winner> winnerOfBet = WinnerService.GetWinnersByBetId(_betPopup.Id);
        winnerOfBet.ForEach(winner => { WinnerService.DeleteWinner(winner.Id);});
        List<UserBet> userBetsOfBet = UserBetService.GetAllUserBetsFromBet(_betPopup);
        userBetsOfBet.ForEach(userBet => { UserBetService.DeleteUserBet(userBet);});
        CaseService.DeleteCasesOfBetId(_betPopup.Id);
        BetService.DeleteBet(_betPopup.Id);
        _isDetailsPopupVisible = false;
        RenderData();
    }

    public class SelectedCase(Case selectedCase, bool selected)
    {
        public readonly Case Case = selectedCase;
        public bool IsSelected = selected;
    }

    private void FilterBets()
    {
        FilteredBets = _bets.Where(bet =>
            (bet.State == State.Active && DisplayAcceptedBets) ||
            (bet.State == State.Closed && DisplayClosedBets) ||
            (bet.State == State.Pending && DisplayPendingBets))
            .ToList();
    }
}
