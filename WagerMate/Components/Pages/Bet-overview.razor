@page "/"
@using WagerMate.Services.auth
@using WagerMate.Services.betting
@using WagerMate.Services.user
@rendermode  InteractiveServer
@inject IBetService BetService;
@inject IUserService UserService;
@inject ICaseService CaseService;
@inject ICookieService CookieService;
@inject IUserBetService UserBetService;
@inject NavigationManager Navigation

<PageTitle>Bet Overview</PageTitle>

<div id="pageHeader">
    <h1>Bet Overview</h1>
</div>

<div id="betOverviewPage">
    <div id="betsCount">
        <h2>Total Bets: @(_bets.Count)</h2>
    </div>
    <div id="creatNewBet">
        <h2>Create a new bet here</h2>
        <button class="new-bet-button" @onclick="ShowPopup">+ New Bet</button>
    </div>
    <div id="allBets">
        <h2 class="bets-heading">Here are your bets:</h2>

        <div id="allBetsLayout">
            @foreach (var bet in _bets)
            {
            <div id="individualBet" @onclick="() => ShowDetailsPopup(bet)">
                <div class="bet-header">
                    <strong>Title:</strong> @bet.Title
                </div>
                <div class="bet-body">
                    <strong>Description:</strong> @bet.Description
                </div>
                <div class="bet-footer">
                    <span class="bet-date"><strong>Created:</strong> @bet.Created.ToShortDateString()</span>
                    <span class="bet-date"><strong>Expires:</strong> @bet.Expiration.ToShortDateString()</span>
                </div>
            </div>

            }
        </div>
    </div>
</div>

<!-- Popup Form -->
@if (_isPopupVisible)
{
    <div id="popup-overlay" @onclick="HidePopup" class="active">
        <div id="popup-content" @onclick:stopPropagation="true">
            <h2 id="h2PopUpCreateNewBet">Create New Bet</h2>
            <div class="create-bet-container">
                <div class="form-group">
                    <label class="form-label">Title:</label>
                    <input type="text" class="form-input" @bind="_newBetDetails.NewBetTitle" placeholder="Enter bet title" />
                </div>
                <div class="form-group">
                    <label class="form-label">Description:</label>
                    <input type="text" class="form-input" @bind="_newBetDetails.NewBetDescription" placeholder="Enter bet description" />
                </div>
                <div class="form-group">
                    <label class="form-label">Bet Amount:</label>
                    <input type="number" class="form-input" @bind="_newBetDetails.NewBetMoney" placeholder="Enter amount" />
                </div>
                <div class="form-group">
                    <label class="form-label">Set Expiration Date:</label>
                    <input type="date" class="form-input" @bind="_newBetDetails.NewBetExpiration" />
                </div>
                <div class="button-group">
                    <button class="btn btn-success create-button" @onclick="CreateNewBet">Create Bet</button>
                    <button class="btn btn-secondary cancel-button" @onclick="HidePopup">Cancel</button>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <br/>
                <br/>
                <div class="alert alert-danger">
                    @ErrorMessage
                </div>
            }

        </div>
    </div>
}

@if (_isDetailsPopupVisible)
{
    <div id="popup-overlay" @onclick="HidePopup" class="active">
        <div id="popup-content" @onclick:stopPropagation="true">
            <h2 id="h2PopUpBetDetails">Bet Details</h2>
            <div class="bet-details-container">
                <div class="bet-detail">
                    <label class="detail-label">Title:</label>
                    <span class="detail-value">@_betPopup.Title</span> 
                </div>
                <div class="bet-detail">
                    <label class="detail-label">Description:</label>
                    <span class="detail-value">@_betPopup.Description</span>
                </div>
                <div class="bet-detail">
                    <label class="detail-label">Bet Amount:</label>
                    <span class="detail-value">@_userbetPopup.Amount</span>
                </div>
                <div class="bet-detail">
                    <label class="detail-label">Expiration Date:</label>
                    <span class="detail-value">@_betPopup.Expiration</span>
                </div>
                <button class="btn btn-secondary cancel-button" @onclick="HideDetailsPopup">Cancel</button>
            </div>

        </div>
    </div>
}

@code{

    private bool _isPopupVisible;
    private bool _isDetailsPopupVisible;


    private NewBetDetails _newBetDetails = new();

    private Bet _betPopup = new();
    private UserBet _userbetPopup = new();
    public class NewBetDetails
    {
        public string NewBetTitle { get; set; } = null!;
        public string NewBetDescription { get; set; } = null!;
        public uint NewBetMoney { get; set; }
        public DateTime NewBetExpiration { get; set; } = DateTime.Now;
    }

    private void ShowPopup()
    {
        _isPopupVisible = true;
        _newBetDetails = new NewBetDetails();
        StateHasChanged();
    }
    
    private void ShowDetailsPopup(Bet bet)
    {
        _userbetPopup = UserBetService.GetUserBetById(_loggedInUser.Id, bet.Id);
        _betPopup = bet;
        _isDetailsPopupVisible = true;
        StateHasChanged();
    }

    private void HidePopup()
    {
        _isPopupVisible = false;
        StateHasChanged();
    }
    private void HideDetailsPopup()
    {
        _isDetailsPopupVisible = false;
        StateHasChanged();
    }

    private string? ErrorMessage { get; set; }

    private void CreateNewBet()
    {
        ErrorMessage = string.Empty;

        if (string.IsNullOrWhiteSpace(_newBetDetails.NewBetTitle) ||
            string.IsNullOrWhiteSpace(_newBetDetails.NewBetDescription) ||
            _newBetDetails.NewBetMoney <= 0 ||
            _newBetDetails.NewBetExpiration == default)
        {
            ErrorMessage = "Please fill out all fields correctly before creating a new bet.";
            return;
        }

        var newBet = new Bet
        {
            Title = _newBetDetails.NewBetTitle,
            Description = _newBetDetails.NewBetDescription,
            InvitationCode = Guid.NewGuid().ToString(),
            Created = DateTime.Now,
            Expiration = _newBetDetails.NewBetExpiration,
            BetAccess = Access.Private,
            BetState = State.Pending
        };
        if (_loggedInUser == null) return;

        var tempCase = new Case
        {
            Casetype = "Money" //TODO: adjust value depending on ?
        };
        var tempUserBet = new UserBet
        {
            User_Id = _loggedInUser.Id,
            Amount = _newBetDetails.NewBetMoney
        };

        try
        {
            // creating Bet, then Case, then UserBet
            var createdBet = BetService.CreateBet(newBet);
            _bets = BetService.GetBetsByUserId(_loggedInUser.Id);
            tempCase.Bet_Id = createdBet.Id;
            tempUserBet.Bet_Id = createdBet.Id;

            var caseId = CaseService.CreateCase(tempCase);
            tempCase.Id = caseId;
            tempUserBet.Case_Id = caseId;

            var userBetId = UserBetService.CreateUserBet(tempUserBet);
            tempUserBet.Id = userBetId;
        }
        catch (Exception)
        {
            Console.WriteLine("BetOverview: service failed");
        }

        HidePopup();
        StateHasChanged();
    }

    private List<Bet> _bets = new();

    //AutoRedirect to the LoginPage
    private bool _firstLogin = true;
    private User? _loggedInUser = new();


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await CookieService.RedirectToLogin("CookieID", Navigation);
        var value = await CookieService.GetCookieByName("CookieID");
        if (_firstLogin)
        {
            _loggedInUser = UserService.GetUserIfPasswordExists(value);
            if (_loggedInUser != null)
            {
                _firstLogin = false;
                RenderData();
            }
        }
    }

    void RenderData()
    {
        try
        {
            if (_loggedInUser == null) return;
            _bets = BetService.GetBetsByUserId(_loggedInUser.Id);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"BetOverview: Error fetching bets - {ex.Message}");
        }
    }

}
