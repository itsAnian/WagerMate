@page "/"
@rendermode  InteractiveServer
@using System.ComponentModel.DataAnnotations
@using WagerMate.Services
@using WagerMate.Data
@inject IBetService BetService;
@inject IBetService Service2;

<PageTitle>Bet Overview</PageTitle>

<h1>Bet Overview</h1>

<div id="betOverviewPage">
    <div id="placeholder">
        <h2>This is the perfect place to showcase your amazing advert!</h2> 
    </div>
    <div id="creatNewBet">
        <h2> Create a new bet here</h2>
        <button class="btn btn-primary" @onclick="ShowPopup">New Bet</button>
    </div>
    <div id="allBets">
        <h2>Here are your bets:</h2>
        <div id="allBetsLayout">
        @foreach (var bet in _bets)
            {
            <div id = "individualBet">
                <strong>ID:</strong> @bet.Id 
                <br />
                <strong>Description:</strong> @bet.Description  
                <br />
                <strong>Created:</strong> @bet.Created.ToShortDateString()  
                <br />
                <strong>Expires:</strong> @bet.Expiration.ToShortDateString()
                <br />
            </div>
            }
        </div>
    </div>
</div>

<!-- Popup Form -->
@if (_isPopupVisible)
{
        <div id="popup-overlay" @onclick="HidePopup" class="active">
            <div id="popup-content" @onclick:stopPropagation="true">
                <h2 id="h2PopUpCreateNewBet">Create New Bet</h2>
                <br/>
                <br/>
                <label>Title:</label><br />
                <input type="text" @bind="NewBetDetails.NewBetTitle" /><br /><br />
                <label>Description:</label><br />
                <input type="text" @bind="NewBetDetails.NewBetDescription" /><br /><br />
                <label>Bet Amount:</label><br />
                <input type="number" @bind="NewBetDetails.NewBetMoney" /><br /><br />
                <label>Set Expiration Date:</label><br />
                <input type="date" @bind="NewBetDetails.NewBetExpiration" /><br /><br />
                <button class="btn btn-success" @onclick="CreatNewBet">Create Bet</button>
                <button class="btn btn-secondary" @onclick="HidePopup">Cancel</button>
            </div>
        </div>
}

@code{

    private bool _isPopupVisible = false;
    
    private NewBetDetails _newBetDetails = new NewBetDetails();

    public class NewBetDetails {
        public static string NewBetTitle { get; set; } = null!;
        public static string NewBetDescription { get; set; } = null!;
        public static uint NewBetMoney { get; set; }
        public static DateTime NewBetExpiration { get; set; } = DateTime.Now;
    }

    private void ShowPopup() {
        _isPopupVisible = true;
        StateHasChanged();
    }

    private void HidePopup() {
        _isPopupVisible = false;
        StateHasChanged();
    }


    private void CreatNewBet() {
        Console.WriteLine("New Bet Button clicked");
        Console.WriteLine(NewBetDetails.NewBetTitle);
        Console.WriteLine(NewBetDetails.NewBetDescription);
        Console.WriteLine(NewBetDetails.NewBetMoney);
        Console.WriteLine(NewBetDetails.NewBetExpiration);
        HidePopup();
        /*Bet bet2 = new Bet();

        bet2.WageritemId = 1;
        bet2.Description = "BetOverview: new test description for a bet";
        bet2.Created = DateTime.Now;
        bet2.Expiration = DateTime.Now.AddYears(50);
        bet2.Cases = new string[] { "Testcase 1", "Testcase 2" };
        bet2.BetAccess = Access.Public;
        bet2.BetState = State.Pending;

        Console.WriteLine("BetOverview: bet locally created");
        try
        {
            Service2.CreateBet(bet2);
        }
        catch (Exception e)
        {
            Console.WriteLine("BetOverview: service failed");
        }*/
    }

    private List<Bet> _bets = new List<Bet>();
    private int _userId = 1; // Set this to the desired user ID

    protected override async Task OnInitializedAsync() {
        //await DisplayAllBets(_userId);

        _bets = new List<Bet> {
            new Bet {
                Id = 1,
                Description = "Default Bet Description",
                Created = DateTime.Now.AddDays(-1),
                Expiration = DateTime.Now.AddDays(365-1)
            },
            new Bet {
                Id = 2,
                Description = "Another Default Bet",
                Created = DateTime.Now.AddDays(-2),
                Expiration = DateTime.Now.AddDays(365-2)
            },
            new Bet {
                Id = 3,
                Description = "Another Default Bet",
                Created = DateTime.Now.AddDays(-3),
                Expiration = DateTime.Now.AddDays(365-3)
            },
            new Bet {
                Id = 4,
                Description = "Another Default Bet",
                Created = DateTime.Now.AddDays(-4),
                Expiration = DateTime.Now.AddDays(365-4)
            },
            new Bet {
                Id = 5,
                Description = "Another Default Bet",
                Created = DateTime.Now.AddDays(-5),
                Expiration = DateTime.Now.AddDays(365-5)
            },
            new Bet {
                Id = 6,
                Description = "Another Default Bet",
                Created = DateTime.Now.AddDays(-6),
                Expiration = DateTime.Now.AddDays(365-6)
            }
        };

        /*private async Task DisplayAllBets(int userId)
        {
            Console.WriteLine("BetOverview: DisplayAllBets");
            try
            {
                _bets = Service2.GetBetsByUserId(userId);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"BetOverview: Error fetching bets - {ex.Message}");
            }
        }*/
    }

}
