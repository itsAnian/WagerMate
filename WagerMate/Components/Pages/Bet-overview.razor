@page "/"
@rendermode  InteractiveServer
@using System.ComponentModel.DataAnnotations
@using WagerMate.Services
@using WagerMate.Data
@using WagerMate.Services.betting
@inject IBetService BetService;
@inject IBetService Service2;

<PageTitle>Bet Overview</PageTitle>

<h1>Bet Overview</h1>

<div id="betOverviewPage">
    <div id="placeholder">
        <h2>This is the perfect place to showcase your amazing advert!</h2> 
    </div>
    <div id="creatNewBet">
        <h2> Create a new bet here</h2>
        <button class="btn btn-primary" @onclick="ShowPopup">New Bet</button>
    </div>
    <div id="allBets">
        <h2>Here are your bets:</h2>
        <div id="allBetsLayout">
        @foreach (var bet in _bets)
            {
            <div id = "individualBet">
                <strong>ID:</strong> @bet.Id 
                <br />
                <strong>Description:</strong> @bet.Description  
                <br />
                <strong>Created:</strong> @bet.Created.ToShortDateString()  
                <br />
                <strong>Expires:</strong> @bet.Expiration.ToShortDateString()
                <br />
            </div>
            }
        </div>
    </div>
</div>

<!-- Popup Form -->
@if (_isPopupVisible)
{
        <div id="popup-overlay" @onclick="HidePopup" class="active">
            <div id="popup-content" @onclick:stopPropagation="true">
                <h2 id="h2PopUpCreateNewBet">Create New Bet</h2>
                <br/>
                <br/>
                <label>Title:</label><br />
                <input type="text" @bind="_newBetDetails.NewBetTitle" /><br /><br />
                <label>Description:</label><br />
                <input type="text" @bind="_newBetDetails.NewBetDescription" /><br /><br />
                <label>Bet Amount:</label><br />
                <input type="number" @bind="_newBetDetails.NewBetMoney" /><br /><br />
                <label>Set Expiration Date:</label><br />
                <input type="date" @bind="_newBetDetails.NewBetExpiration" /><br /><br />
                <button class="btn btn-success" @onclick="CreateNewBet">Create Bet</button>
                <button class="btn btn-secondary" @onclick="HidePopup">Cancel</button>

                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <br/>
                    <br/>
                    <div class="alert alert-danger">
                        @ErrorMessage
                    </div>
                }
                
            </div>
        </div>
}

@code{

    private bool _isPopupVisible = false;
    
    private NewBetDetails _newBetDetails = new NewBetDetails();

    public class NewBetDetails {
        public string NewBetTitle { get; set; } = null!;
        public string NewBetDescription { get; set; } = null!;
        public uint NewBetMoney { get; set; }
        public DateTime NewBetExpiration { get; set; } = DateTime.Now;
    }

    private void ShowPopup() {
        _isPopupVisible = true;
        _newBetDetails = new NewBetDetails();
        StateHasChanged();
    }

    private void HidePopup() {
        _isPopupVisible = false;
        StateHasChanged();
    }

    public string ErrorMessage { get; set; }

    private void CreateNewBet() {
        
        ErrorMessage = string.Empty;
        
        if (string.IsNullOrWhiteSpace(_newBetDetails.NewBetTitle) ||
            string.IsNullOrWhiteSpace(_newBetDetails.NewBetDescription) ||
            _newBetDetails.NewBetMoney <= 0 ||
            _newBetDetails.NewBetExpiration == default(DateTime))
        {
            ErrorMessage = "Please fill out all fields correctly before creating a new bet.";
            return;
        }

        Bet newbet = new Bet();
        newbet.Title = _newBetDetails.NewBetTitle;
        newbet.Description = _newBetDetails.NewBetDescription;
        newbet.InvitationCode = "13df870a-b1c7-4a1b-8183-29904a1e36ae"; //TODO: Add real UUID 
        newbet.Created = DateTime.Now;
        newbet.Expiration = _newBetDetails.NewBetExpiration;
        newbet.BetAccess = Access.Private;
        newbet.BetState = State.Pending;

        try {
            int userId = 1; //TODO: Set this to the current user ID
            Service2.CreateBet(newbet);
            _bets = Service2.GetBetsByUserId(userId);
        }
        catch (Exception e) {
            Console.WriteLine("BetOverview: service failed");
        }
        
        HidePopup();
    }
 
    private List<Bet> _bets = new List<Bet>();
    private int _userId = 1; // TODO: Set this to the current user ID

    protected override async Task OnInitializedAsync() {

        await DisplayAllBets(_userId);

        async Task DisplayAllBets(int userId)
        {
            try
            {
                _bets = Service2.GetBetsByUserId(userId);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"BetOverview: Error fetching bets - {ex.Message}");
            }
        }
    }

}
